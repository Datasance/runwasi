
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json

# this action will require write permission to id-token
name: Build shims

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      runtime:
        required: true
        type: string
      target:
        required: false
        type: string
      slug:
        required: true
        type: string
      arch:
        required: false
        type: string
      sign:
        default: false
        type: boolean
      binprefix:
        default: containerd-shim-
        type: string
        required: false

jobs:
  build-sign-upload:
    permissions:
      actions: write
      checks: write
      contents: write
      deployments: write
      id-token: write
      issues: write
      discussions: write
      packages: write
      pages: write
      pull-requests: write
      repository-projects: write
      security-events: write
      statuses: write
    name: build for ${{ inputs.slug }}
    runs-on: ${{ inputs.os }}
    steps:
      - name: describe runner
        run: |
          echo "::notice::Running job with os: '${{ inputs.os }}', arch: '${{ inputs.arch }}', slug: '${{ inputs.slug }}', runtime: '${{ inputs.runtime }}', target: '${{ inputs.target }}'"
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-env
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        env:
          RUST_CACHE_KEY_OS: rust-cache-${{ inputs.os }}-${{ inputs.slug }}
        with:
          rustflags: '' #Disable.  By default this action sets environment variable is set to -D warnings.  We manage this in the Makefile
      - name: Setup cross-rs
        if: runner.os == 'Linux'
        run: ./scripts/setup-cross.sh ${{ inputs.target }}
      - name: Setup build profile
        shell: bash
        run: echo "OPT_PROFILE=release" >> ${GITHUB_ENV}
      - name: Build
        run: make build-${{ inputs.runtime }}
      - name: Check if crate is ready to publish
        if: ${{ inputs.runtime == 'common' }}
        shell: bash
        run: make publish-check
      - name: Run tests
        timeout-minutes: 5
        run: |
          make test-${{ inputs.runtime }}
        if: ${{ inputs.arch == 'x86_64' }}
      - name: Install binaries
        if: ${{ inputs.runtime != 'common' }}
        shell: bash
        run: |  
          make dist-${{ inputs.runtime }}
      - name: Run stress tests
        if: ${{ inputs.runtime != 'common' && inputs.binprefix == 'containerd-shim-' && inputs.arch == 'x86_64' && runner.os == 'Linux' }}
        timeout-minutes: 5
        shell: bash
        run: |
          set -euox pipefail
          sudo ctr images pull ghcr.io/containerd/runwasi/wasi-demo-app:latest
          make test/stress-${{ inputs.runtime }}
      - name: Run stress tests with containerd
        if: ${{ inputs.runtime != 'common' && inputs.binprefix == 'containerd-shim-' && inputs.arch == 'x86_64' && runner.os == 'Linux' }}
        timeout-minutes: 5
        shell: bash
        run: |
          set -euox pipefail
          sudo ctr images pull ghcr.io/containerd/runwasi/wasi-demo-app:latest
          make test/stress-c8d-${{ inputs.runtime }}
      - name: Sign the binary
        if: ${{ inputs.runtime != 'common' && inputs.slug != 'windows' && inputs.sign }}
        uses: ./.github/actions/sign
        with:
          runtime: ${{ inputs.runtime }}
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0
      - name: Set image tag
        shell: bash
        id: tags
        run: |
          if [[ ${{ github.ref_name }} =~ ^v.* ]] ; then
            version=$(echo "${{ github.ref_name }}" | sed 's/^v//')
            echo "VERSION=$version" >> "${GITHUB_OUTPUT}"
          else
            version=$(echo "${{ steps.previoustag.outputs.tag }}-${{ github.run_number }}" | sed 's/^v//')-dev
            echo "VERSION=$version" >> "${GITHUB_OUTPUT}"
          fi
      - name: Get image tag
        run: |
          echo ${{ steps.tags.outputs.VERSION }}
      - name: Set up Ruby 3.1.4
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.4
      - run: |
          gem install --no-document fpm
          fpm -h
      - name: Package artifacts
        id: package
        if: ${{ inputs.runtime != 'common' && inputs.slug != 'windows' }}
        shell: bash
        run: |
          # Check if there's any files to archive as tar fails otherwise
          if stat dist/bin/* >/dev/null 2>&1; then
            tar -czf dist/${{ inputs.binprefix }}${{ inputs.runtime }}-${{ inputs.slug }}.tar.gz -C dist/bin .
          else
            tar -czf dist/${{ inputs.binprefix }}${{ inputs.runtime }}-${{ inputs.slug }}.tar.gz -T /dev/null
          fi

          # Map inputs.slug to proper architecture for fpm
          if [[ "${{ inputs.slug }}" == "x86_64-linux-gnu" || "${{ inputs.slug }}" == "x86_64-linux-musl" ]]; then
              arch="amd64"
          elif [[ "${{ inputs.slug }}" == "aarch64-linux-gnu" || "${{ inputs.slug }}" == "aarch64-linux-musl" ]]; then
              arch="arm64"
          else
              echo "Unsupported architecture slug: ${{ inputs.slug }}"
              exit 1
          fi
          echo "arch=$arch" >> "${GITHUB_OUTPUT}"
          # Ensure the binary exists
          binary_path="/home/runner/work/runwasi/runwasi/dist/bin/containerd-shim-${{ inputs.runtime }}-v1"
          if [[ -f $binary_path ]]; then
              cd /home/runner/work/runwasi/runwasi/dist/bin/
              ls -la /home/runner/work/runwasi/runwasi/dist/bin/
              # Map slug for DEB explicitly
              deb_slug=${{ inputs.slug }}
              if [[ "$deb_slug" == "x86_64-linux-gnu" ]]; then
                  deb_slug="x86-64-linux-gnu"
              fi
              echo "deb_slug=$deb_slug" >> "${GITHUB_OUTPUT}"
              # Create a .deb package
              fpm -s dir -t deb --name containerd-shim-${{ inputs.runtime }}-v1-${{ inputs.slug }} --version ${{ steps.tags.outputs.VERSION }} --architecture $arch --depends 'docker-ce > 26.0.0' ./containerd-shim-${{ inputs.runtime }}-v1=/usr/local/bin/containerd-shim-${{ inputs.runtime }}-v1
              # Map architecture for RPM explicitly
              rpm_arch=$arch
              if [[ "$arch" == "arm64" ]]; then
                  rpm_arch="aarch64" #
              elif [[ "$arch" == "amd64" ]]; then
                  rpm_arch="x86_64"
              fi
              echo "rpm_arch=$rpm_arch" >> "${GITHUB_OUTPUT}"
              # Create an .rpm package
              fpm -s dir -t rpm --name containerd-shim-${{ inputs.runtime }}-v1-${{ inputs.slug }} --version ${{ steps.tags.outputs.VERSION }} --architecture $rpm_arch --rpm-os 'linux' --depends 'docker-ce > 26.0.0' ./containerd-shim-${{ inputs.runtime }}-v1=/usr/local/bin/containerd-shim-${{ inputs.runtime }}-v1
              # Move generated packages
              mkdir -p /home/runner/work/runwasi/runwasi/dist/packages
              mv *.deb *.rpm /home/runner/work/runwasi/runwasi/dist/packages
              ls -la /home/runner/work/runwasi/runwasi/dist/bin/
              ls -la /home/runner/work/runwasi/runwasi/dist/packages/
          else
              echo "No binaries found to package"
              exit 1
          fi
      - name: Upload artifacts
        if: ${{ inputs.runtime != 'common' && inputs.slug != 'windows' }}
        uses: actions/upload-artifact@master
        with:
          name: ${{ inputs.binprefix }}${{ inputs.runtime }}-${{ inputs.slug }}
          path: dist/${{ inputs.binprefix }}${{ inputs.runtime }}-${{ inputs.slug }}.tar.gz
      - name: Release
        uses: softprops/action-gh-release@v1
        if: ${{ inputs.runtime != 'common' && inputs.slug != 'windows' && startsWith(github.ref, 'refs/tags/')}}
        with:
          files: |
            /home/runner/work/runwasi/runwasi/dist/packages/containerd-shim-${{ inputs.runtime }}-v1-${{ steps.package.outputs.deb_slug }}_${{ steps.tags.outputs.VERSION }}_${{ steps.package.outputs.arch }}.deb
            /home/runner/work/runwasi/runwasi/dist/packages/containerd-shim-${{ inputs.runtime }}-v1-${{ inputs.slug }}-${{ steps.tags.outputs.VERSION }}-1.${{ steps.package.outputs.rpm_arch }}.rpm
