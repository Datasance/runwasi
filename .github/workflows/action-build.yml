
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json

# this action will require write permission to id-token
name: Build shims

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      runtime:
        required: true
        type: string
      target:
        required: false
        type: string
      slug:
        required: true
        type: string
      arch:
        required: false
        type: string
      sign:
        default: false
        type: boolean

jobs:
  build-sign-upload:
    permissions:
      id-token: write
    name: build for ${{ inputs.slug }}
    runs-on: ${{ inputs.os }}
    steps:
      - name: describe runner
        run: |
          echo "::notice::Running job with os: '${{ inputs.os }}', arch: '${{ inputs.arch }}', slug: '${{ inputs.slug }}', runtime: '${{ inputs.runtime }}', target: '${{ inputs.target }}'"
      - uses: actions/checkout@v4
      - name: Setup build env
        run: |
          os=$(echo "$RUNNER_OS" | tr '[:upper:]' '[:lower:]')
          ./scripts/setup-$os.sh
        shell: bash
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        env:
          RUST_CACHE_KEY_OS: rust-cache-${{ inputs.os }}-${{ inputs.slug }}
        with:
          rustflags: '' #Disable.  By default this action sets environment variable is set to -D warnings.  We manage this in the Makefile
      - name: Setup cross-rs
        if: runner.os == 'Linux'
        run: ./scripts/setup-cross.sh ${{ inputs.target }}
      - name: Setup build profile
        shell: bash
        run: echo "OPT_PROFILE=release" >> ${GITHUB_ENV}
      - name: Build
        run: make build-${{ inputs.runtime }}
      - name: Run tests
        timeout-minutes: 5
        run: |
          make test-${{ inputs.runtime }}
        if: ${{ inputs.arch == 'x86_64' }}
      - name: Sign the binary
        if: ${{ inputs.runtime != 'common' && inputs.slug != 'windows' && inputs.sign }}
        uses: ./.github/workflows/action-sign.yml
        with:
          runtime: ${{ inputs.runtime }}
          os: ${{ inputs.os }}
      - name: Set image tag
        shell: bash
        id: tags
        run: |
          if [[ ${{ github.ref_name }} =~ ^v.* ]] ; then
            echo "VERSION=${{ github.ref_name }}" >> "${GITHUB_OUTPUT}"
          else
              echo "VERSION=${{ steps.previoustag.outputs.tag }}-dev" >> "${GITHUB_OUTPUT}"
          fi
      - name: Get image tag
        run: |
          echo ${{ steps.tags.outputs.VERSION }}
      - name: Set up Ruby 3.1.4
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.4
      - run: |
          gem install --no-document fpm
          fpm -h
      - name: Package artifacts
        if: ${{ inputs.runtime != 'common' }}
        shell: bash
        run: |
          # Check if the slug is "windows", and skip packaging if true
          if [[ "${{ inputs.slug }}" == "windows" ]]; then
            echo "Skipping packaging for Windows"
            exit 0
          fi
          # Build the binary using the Makefile (same as your original code)
          make dist-${{ inputs.runtime }}
      
          # Check if there are any files to package
          if stat dist/bin/* >/dev/null 2>&1; then
          
            # Create a .deb package with docker-ce dependency
            cd /home/runner/work/runwasi/runwasi/dist/bin/
            ls
            fpm -s dir -d docker-ce -t deb -n containerd-shim-${{ inputs.runtime }}-v1 -v ${{ steps.version.outputs.VERSION }} --architecture ${{ inputs.slug }} -C /home/runner/work/runwasi/runwasi/dist/bin/
            ls
      
            # Create an .rpm package with docker-ce dependency
            fpm -s dir --depends docker-ce -t rpm -n containerd-shim-${{ inputs.runtime }}-v1 -v ${{ steps.version.outputs.VERSION }} --architecture ${{ inputs.slug }} -C /home/runner/work/runwasi/runwasi/dist/bin/
            ls
            
            #  Move the generated packages to a specific directory
            mkdir -p /home/runner/work/runwasi/runwasi/dist/packages
            mv *.deb *.rpm /home/runner/work/runwasi/runwasi/dist/packages
          else
            echo "No binaries found to package"
          fi
      - name: Upload artifacts
        if: ${{ inputs.runtime != 'common' }}
        uses: actions/upload-artifact@master
        with:
          name: containerd-shim-${{ inputs.runtime }}-v1
          path: ${{ github.workspace }}/dist/packages
